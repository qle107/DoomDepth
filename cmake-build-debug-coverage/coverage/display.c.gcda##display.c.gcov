        -:    0:Source:D:/esgi/3rd year/C/doomdepths/src/util/display.c
        -:    0:Graph:D:\esgi\3rd year\C\doomdepths\cmake-build-debug-coverage\CMakeFiles\Code.dir\src\util\display.c.gcno
        -:    0:Data:D:\esgi\3rd year\C\doomdepths\cmake-build-debug-coverage\CMakeFiles\Code.dir\src\util\display.c.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by lequa on 11/4/2023.
        -:    3://
        -:    4:
        -:    5:#include "display.h"
        -:    6:
function printProgressBar called 2 returned 100% blocks executed 100%
        2:    7:void printProgressBar(char *label, int current, int max, int width) {
        2:    8:    int barLength = current / max * width;
        2:    9:    printf("%s ", label);
        2:    9-block  0
call    0 returned 2
        2:   10:    printf("[");
call    0 returned 2
      102:   11:    for (int i = 0; i < width; i++) {
      100:   11-block  0
      102:   11-block  1
branch  0 taken 100
branch  1 taken 2 (fallthrough)
      100:   12:        if (i < barLength) {
      100:   12-block  0
branch  0 taken 50 (fallthrough)
branch  1 taken 50
       50:   13:            printf("#");
       50:   13-block  0
call    0 returned 50
        -:   14:        } else {
       50:   15:            printf("-");
       50:   15-block  0
call    0 returned 50
        -:   16:        }
        -:   17:    }
        2:   18:    printf("]");
        2:   18-block  0
call    0 returned 2
        -:   19:
        2:   20:    printf("  %d / %d \n", current, max);
call    0 returned 2
        2:   21:}
        -:   22:
function displayCharacterHpMana called 1 returned 100% blocks executed 100%
        1:   23:void displayCharacterHpMana(Character c) {
        1:   24:    printProgressBar("HP: ", c.currentHealth, c.maxHealth, 50);
        1:   24-block  0
call    0 returned 1
        1:   25:    printProgressBar("Exp:", c.currentExp, c.maxExp, 50);
call    0 returned 1
        1:   26:}
        -:   27:
        -:   28:void displayGraphic(Character c, Monster **m);
