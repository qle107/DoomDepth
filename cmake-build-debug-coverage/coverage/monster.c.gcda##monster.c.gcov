        -:    0:Source:D:/esgi/3rd year/C/doomdepths/src/monster/monster.c
        -:    0:Graph:D:\esgi\3rd year\C\doomdepths\cmake-build-debug-coverage\CMakeFiles\Code.dir\src\monster\monster.c.gcno
        -:    0:Data:D:\esgi\3rd year\C\doomdepths\cmake-build-debug-coverage\CMakeFiles\Code.dir\src\monster\monster.c.gcda
        -:    0:Runs:1
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:#include <time.h>
        -:    4:#include "monster.h"
        -:    5:
        -:    6:// Demo jsut for testing I will update them later to fit the terminal size
        -:    7:char *monster_art[] = {
        -:    8:        "  ^_^  ",
        -:    9:        " (o.o) ",
        -:   10:        " (> <) ",
        -:   11:        "  |-|  "
        -:   12:};
        -:   13:
        -:   14:// On the base game you are fighting between 1 and 3 mobs
function random_number called 0 returned 0% blocks executed 0%
    #####:   15:int random_number(int min, int max) {
    #####:   16:    return rand() % (max - min + 1) + min;
    %%%%%:   16-block  0
call    0 never executed
        -:   17:}
        -:   18:
        -:   19:
function generate_random_monsters called 0 returned 0% blocks executed 0%
    #####:   20:int generate_random_monsters(Monster monsters[], int max_monsters) {
        -:   21:    // Randomization based on time
    #####:   22:    srand(time(NULL));
    %%%%%:   22-block  0
call    0 never executed
call    1 never executed
        -:   23:
    #####:   24:    int monster_count = random_number(1, max_monsters);
call    0 never executed
        -:   25:
    #####:   26:    for (int i = 0; i < monster_count; i++) {
    %%%%%:   26-block  0
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:   27:        monsters[i].life = random_number(35, 50);         // Should be update in order to reflect the player stats
    %%%%%:   27-block  0
call    0 never executed
    #####:   28:        monsters[i].min_attack = random_number(1, 3);     // Refleting the starting mosnters
call    0 never executed
    #####:   29:        monsters[i].max_attack = random_number(3, 5);     // Have to make calculation for critical hit later
call    0 never executed
    #####:   30:        monsters[i].defense = random_number(1, 5);        // Reduce the damage inflicted by the player
call    0 never executed
    #####:   31:        monsters[i].ascii_art = monster_art[random_number(0, sizeof(monster_art) / sizeof(monster_art[0]) - 1)];
call    0 never executed
    #####:   32:        monsters[i].turn = 3;                                       // The monster can attack 3 times
        -:   33:    }
        -:   34:
    #####:   35:    return monster_count;  // Return the number of mobs
    %%%%%:   35-block  0
        -:   36:}
        -:   37:
        -:   38:/**
        -:   39: * Display the monsters
        -:   40: * @param monsters
        -:   41: * @param monster_count
        -:   42: */
function display_monsters called 0 returned 0% blocks executed 0%
    #####:   43:void display_monsters(Monster monsters[], int monster_count) {
    #####:   44:    for (int i = 0; i < monster_count; i++) {
    %%%%%:   44-block  0
    %%%%%:   44-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:   45:        printf("Monster %d:\n", i + 1); //I have to update it later to set a name instead
    %%%%%:   45-block  0
call    0 never executed
    #####:   46:        printf("Life: %d\n", monsters[i].life);
call    0 never executed
    #####:   47:        printf("Attack: %d - %d\n", monsters[i].min_attack, monsters[i].max_attack);
call    0 never executed
    #####:   48:        printf("Defense: %d\n", monsters[i].defense);
call    0 never executed
    #####:   49:        printf("%s\n\n", monsters[i].ascii_art);
call    0 never executed
        -:   50:    }
    #####:   51:}
        -:   52:
        -:   53:/**
        -:   54: * Calculate the damage based on the monster's attack
        -:   55: * @param monster
        -:   56: * @return the damage
        -:   57: */
function calculateBasedMonsterDamage called 0 returned 0% blocks executed 0%
    #####:   58:int calculateBasedMonsterDamage(Monster *monster) {
    #####:   59:    return random_number(monster->min_attack, monster->max_attack);
    %%%%%:   59-block  0
call    0 never executed
        -:   60:}
